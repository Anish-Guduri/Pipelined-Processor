
0x4c400004  // MOV r1, 4  ; Move the immediate value 4 into register r1
0x4c0004d2  // mov r0, 1234 
0x4c8003e8  // mov r2, 1000
0x4cc00032  // mov r3, 50
0x4d000101  // mov r4, 257
0x4d405014  // mov r5, 20500
0x2c040004  // CMP r1, 4  ; Compare register r1 with the immediate value 4
0x0a4d0000  // sub r9, r3, r4
0x80000002  // BEQ .loop  ; Branch to label .loop if r1 equals 4 (branch offset = 2)
0x019e4000  // ADD r6, r7, r9  ; Add the values in registers r7 and r9, store result in r6
0x019e0000  // ADD r6, r7, r8  ; Add the values in registers r7 and r8, store result in r6


0x4c400004
0x2c040004
0x80000002
0x019e4000
0x019e0000



4c0004d2
4c400004
4c8003e8
4cc00032
4d000101
4d405014
7c0404d4
2c040004
01804000
11c48000
1a08c000
0a4d0000
770404d4

0x4c0004d2  // mov r0, 1234  0
0x4c400004  // mov r1, 4        
0x01804000  // add r6, r0, r1
0x4c8003e8  // mov r2, 1000
0x4cc00032  // mov r3, 50
0x4d000101  // mov r4, 257
0x4d405014  // mov r5, 20500
0x7c0404d4  // st r0, 0x4d4[r1]
0x2c040004  CMP r1, 4  ;
0x0a4d0000  // sub r9, r3, r4
0x80000002  // BEQ .loop  ;
0x11c48000  // mul r7, r1, r2
0x1a08c000  // div r8, r2, r3
0x770404d4   // ld r12, 0x4d4[r1]



PS D:\Downloads\interpreter> .\a.exe .\loop.asm
mov r12,  1000: 0x4f0003e8
st r0, 0x4d4[r1]: 0x7c0404d4
add r6, r3, r4: 0x018d0000
sub r7, r8, r9: 0x09e24000
sub r5, r11, 434: 0x0d6c01b2
mul r10, r3, r12: 0x128f0000


4c0004d2  // mov r0, 1234
4c400000  // mov r1, 0
7c0404d4  // st r0, 0x4d4[r1]
4c800c35  // mov r2, 0xc35
7c88f55b  // st r2, 0xf55b[r2]
778404d4  // ld r14, 0x4d4[r1]
77c8f55b  // ld r15, 0xf55b[r2]




mov r0, 5: 0x4c000005
mov r1, 1: 0x4c400001
mov r2, 1: 0x4c800001
cmp r2, r0: 0x28080000
bgt .break: 0x88000004
mul r1, r1, r2: 0x10448000
add r2, r2, 1: 0x04880001
b .loop  : 0x97fffffc



// Load store
4c0004d2
4c400000
7c0404d4
4c800c35
7c88f55b
778404d4
77c8f55b


// factorial-loop
0x4c000005
0x4c400001
0x4c800001
0x28080000
0x88000004
0x10448000
0x04880001
0x97fffffc


// factorial-recursion
mov r0, 10: 0x4c00000a
call .factorial: 0x98000001
cmp r0, 1: 0x2c000001
bgt .continue   : 0x88000003
mov r1, 1: 0x4c400001
ret: 0xa0000000
sub sp, sp, 8: 0x0fb80008
st r0, [sp]: 0x7c380000
st ra, 4[sp]: 0x7ff80004
sub r0, r0 , 1 : 0x0c000001
call .factorial: 0x9ffffff8
ld ra, 4[sp]: 0x77f80004
ld r0 ,  [sp]: 0x74380000
add sp,sp, 8: 0x07b80008
mul r1, r0,r1: 0x10404000
ret: 0xa0000000




.encode // Factorial Loop

.main:
mov r0, 5
mov r1, 1
mov r2, 1
.loop:
cmp r2, r0
bgt .break
mul r1, r1, r2
add r2, r2, 1
b .loop  
.break:



// Factorial Recursion

.main:
mov r0, 10
call .factorial

.factorial:
cmp r0, 1
bgt .continue	
mov r1, 1
ret
.continue:
sub sp, sp, 8
st r0, [sp]
st ra, 4[sp]
sub r0, r0 , 1 
call .factorial
ld ra, 4[sp]
ld r0 ,  [sp]
add sp,sp, 8
mul r1, r0,r1
ret

// factorial-rec.asm
mov r0, 10: 0x4c00000a
call .factorial: 0x98000001
cmp r0, 1: 0x2c000001
bgt .continue	: 0x88000003
mov r1, 1: 0x4c400001
ret: 0xa0000000
sub sp, sp, 8: 0x0fb80008
st r0, [sp]: 0x7c380000
st ra, 4[sp]: 0x7ff80004
sub r0, r0 , 1 : 0x0c000001
call .factorial: 0x9ffffff8
ld ra, 4[sp]: 0x77f80004
ld r0 ,  [sp]: 0x74380000
add sp,sp, 8: 0x07b80008
mul r1, r0,r1: 0x10404000
ret: 0xa0000000

Extracted Hex Codes:
0x4c00000a
0x98000001
0x2c000001
0x88000003
0x4c400001
0xa0000000
0x0fb80008
0x7c380000
0x7ff80004
0x0c000001
0x9ffffff8
0x77f80004
0x74380000
0x07b80008
0x10404000
0xa0000000

abhay factorial rec

0x4c000003
0x98000002
0x90000011
0x2c000001
0x8000000d
0x88000002
0x9000000b
0x0fb80008
0x7c380000
0x7ff80004
0x0c000001
0x9ffffff8
0x74380000
0x77f80004
0x10404000
0x07b80008
0xa0000000
0x4c400001
0xa0000000
0x04440000


.main:
.encode mov r0, 3
.encode call .factorial
.encode b .end

.factorial:
.encode cmp r0, 1
.encode beq .return
.encode bgt .continue
.encode b .return

.continue:
.encode sub sp, sp, 8 
.encode st r0, [sp] 
.encode st ra, 4[sp] 
.encode sub r0, r0, 1 
.encode call .factorial
.encode ld r0, [sp] 
.encode ld ra, 4[sp] 
.encode mul r1, r0, r1 
.encode add sp, sp, 8
.encode ret

.return:
.encode mov r1, 1
.encode ret

.end:
.encode add r1, r1 ,0

// FACTORIAL RECURSION CODE
0x4c000003
0x98000002
0x90000011
0x2c000001
0x8000000d
0x88000002
0x9000000b
0x0fb80008
0x7c380000
0x7ff80004
0x0c000001
0x9ffffff8
0x74380000
0x77f80004
0x10404000
0x07b80008
0xa0000000
0x4c400001
0xa0000000
0x04440000




// RAMANUJAN NUMBER CODE
0x4c000000
0x4d000000
0x4d400000
0x4d800000
0x4cc00000
0x4c400001
0x11044000
0x11104000
0x28100000
0x88000011
0x4c800001
0x28084000
0x8800000c
0x11488000
0x11548000
0x01914000
0x28180000
0x80000002
0x90000004
0x04cc0001
0x2c0c0002
0x80000007
0x04880001
0x97fffff4
0x04440001
0x97ffffed
0x04000001
0x97ffffe9
0x04000000
0xf8000000


0x74480004
0x7c4c0008
0x744c0008
0xf8000000