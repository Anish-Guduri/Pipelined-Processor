$date
	Sat Oct 19 17:57:24 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 32 ! Operand_2 [31:0] $end
$var wire 32 " Operand_A [31:0] $end
$var wire 32 # Operand_B [31:0] $end
$var wire 32 $ branchTarget [31:0] $end
$var wire 1 % isImmendiate $end
$var wire 1 & isReturn $end
$var wire 1 ' isStore $end
$var wire 1 ( reset $end
$var wire 10 ) output_OF_PC [9:0] $end
$var wire 32 * output_OF_IR [31:0] $end
$var wire 10 + outputPC [9:0] $end
$var wire 1 , is_Branch_Taken $end
$var wire 10 - input_OF_PC [9:0] $end
$var wire 10 . branchPC [9:0] $end
$var wire 10 / PC [9:0] $end
$var wire 32 0 Input_OF_IR [31:0] $end
$var wire 32 1 IR [31:0] $end
$var reg 1 2 clk $end
$scope module processor $end
$var wire 32 3 Operand_2 [31:0] $end
$var wire 32 4 Operand_A [31:0] $end
$var wire 32 5 Operand_B [31:0] $end
$var wire 32 6 branchTarget [31:0] $end
$var wire 1 2 clk $end
$var wire 1 % isImmendiate $end
$var wire 1 & isReturn $end
$var wire 1 ' isStore $end
$var wire 10 7 output_OF_PC [9:0] $end
$var wire 32 8 output_OF_IR [31:0] $end
$var wire 10 9 output_IF_PC [9:0] $end
$var wire 10 : input_OF_PC [9:0] $end
$var wire 32 ; Input_OF_IR [31:0] $end
$var wire 32 < IR [31:0] $end
$var reg 10 = PC [9:0] $end
$var reg 10 > branchPC [9:0] $end
$var reg 1 , is_Branch_Taken $end
$var reg 1 ( reset $end
$scope module OperandFetch $end
$var wire 32 ? Operand_2 [31:0] $end
$var wire 32 @ Operand_A [31:0] $end
$var wire 32 A Operand_B [31:0] $end
$var wire 32 B branchTarget [31:0] $end
$var wire 1 2 clk $end
$var wire 1 % isImmendiate $end
$var wire 1 & isReturn $end
$var wire 1 ' isStore $end
$var wire 32 C output_OF_IR [31:0] $end
$var wire 10 D output_OF_PC [9:0] $end
$var wire 10 E Input_OF_PC [9:0] $end
$var wire 32 F Input_OF_IR [31:0] $end
$var reg 18 G immediateVlaue [17:0] $end
$var reg 4 H ra [3:0] $end
$var reg 4 I rd [3:0] $end
$var reg 4 J rs1 [3:0] $end
$var reg 4 K rs2 [3:0] $end
$upscope $end
$scope module iFetch $end
$var wire 10 L branchPC [9:0] $end
$var wire 1 2 clk $end
$var wire 10 M inputPC [9:0] $end
$var wire 1 , is_Branch_Taken $end
$var wire 1 ( reset $end
$var wire 10 N mux_nextPC [9:0] $end
$var wire 32 O IR [31:0] $end
$var reg 10 P PC [9:0] $end
$var reg 10 Q address [9:0] $end
$var reg 10 R outputPC [9:0] $end
$scope module iMemory $end
$var wire 10 S address [9:0] $end
$var reg 32 T instruction [31:0] $end
$var reg 32 U temp [31:0] $end
$var integer 32 V file [31:0] $end
$var integer 32 W i [31:0] $end
$var integer 32 X readResult [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 10 Y input0 [9:0] $end
$var wire 10 Z input1 [9:0] $end
$var wire 1 , selectLine $end
$var reg 10 [ output_y [9:0] $end
$upscope $end
$upscope $end
$scope module latch_if_of $end
$var wire 32 \ IF_instruction [31:0] $end
$var wire 1 2 clk $end
$var wire 10 ] output_IF_PC [9:0] $end
$var reg 10 ^ Input_OF_PC [9:0] $end
$var reg 32 _ OF_instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx _
bx ^
bx ]
bx \
b100 [
b0 Z
b100 Y
b1 X
b1100 W
b10000000000000000000000000000011 V
b1110111110010001111010101011011 U
bx T
bx S
bx R
bx Q
b0 P
bx O
b100 N
bx M
b0 L
bx K
bx J
bx I
b1111 H
bx G
bx F
bx E
bx D
bx C
bz B
bz A
bz @
bz ?
b0 >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bz 6
bz 5
bz 4
bz 3
12
bx 1
bx 0
bx /
b0 .
bx -
0,
bx +
bx *
bx )
1(
z'
z&
z%
bz $
bz #
bz "
bz !
$end
#2000
0(
#5000
02
#9000
b1001100000000000000010011010010 1
b1001100000000000000010011010010 <
b1001100000000000000010011010010 O
b1001100000000000000010011010010 T
b1001100000000000000010011010010 \
b1000 N
b1000 [
b1000 Y
b100 P
b0 +
b0 9
b0 R
b0 ]
b0 Q
b0 S
#10000
12
#15000
02
#17000
b1001100000000000000010011010010 *
b1001100000000000000010011010010 8
b1001100000000000000010011010010 C
b1001100000000000000010011010010 0
b1001100000000000000010011010010 ;
b1001100000000000000010011010010 F
b1001100000000000000010011010010 _
b0 )
b0 7
b0 D
b0 -
b0 :
b0 E
b0 ^
#19000
b1001100010000000000000000000000 1
b1001100010000000000000000000000 <
b1001100010000000000000000000000 O
b1001100010000000000000000000000 T
b1001100010000000000000000000000 \
b1100 N
b1100 [
b1100 Y
b1000 P
b100 +
b100 9
b100 R
b100 ]
b100 Q
b100 S
#20000
12
#25000
02
#27000
b1001100010000000000000000000000 *
b1001100010000000000000000000000 8
b1001100010000000000000000000000 C
b1001100010000000000000000000000 0
b1001100010000000000000000000000 ;
b1001100010000000000000000000000 F
b1001100010000000000000000000000 _
b100 )
b100 7
b100 D
b100 -
b100 :
b100 E
b100 ^
#29000
b1111100000001000000010011010100 1
b1111100000001000000010011010100 <
b1111100000001000000010011010100 O
b1111100000001000000010011010100 T
b1111100000001000000010011010100 \
b10000 N
b10000 [
b10000 Y
b1100 P
b1000 +
b1000 9
b1000 R
b1000 ]
b1000 Q
b1000 S
#30000
12
#35000
b0 G
b0 K
b0 J
b1 I
02
#37000
b1111100000001000000010011010100 *
b1111100000001000000010011010100 8
b1111100000001000000010011010100 C
b1111100000001000000010011010100 0
b1111100000001000000010011010100 ;
b1111100000001000000010011010100 F
b1111100000001000000010011010100 _
b1000 )
b1000 7
b1000 D
b1000 -
b1000 :
b1000 E
b1000 ^
#39000
b1001100100000000000110000110101 1
b1001100100000000000110000110101 <
b1001100100000000000110000110101 O
b1001100100000000000110000110101 T
b1001100100000000000110000110101 \
b10100 N
b10100 [
b10100 Y
b10000 P
b1100 +
b1100 9
b1100 R
b1100 ]
b1100 Q
b1100 S
#40000
12
#45000
b10011010100 G
b1 J
b0 I
02
#47000
b1001100100000000000110000110101 *
b1001100100000000000110000110101 8
b1001100100000000000110000110101 C
b1001100100000000000110000110101 0
b1001100100000000000110000110101 ;
b1001100100000000000110000110101 F
b1001100100000000000110000110101 _
b1100 )
b1100 7
b1100 D
b1100 -
b1100 :
b1100 E
b1100 ^
#49000
b1111100100010001111010101011011 1
b1111100100010001111010101011011 <
b1111100100010001111010101011011 O
b1111100100010001111010101011011 T
b1111100100010001111010101011011 \
b11000 N
b11000 [
b11000 Y
b10100 P
b10000 +
b10000 9
b10000 R
b10000 ]
b10000 Q
b10000 S
#50000
12
#55000
b110000110101 G
b0 J
b10 I
02
#57000
b1111100100010001111010101011011 *
b1111100100010001111010101011011 8
b1111100100010001111010101011011 C
b1111100100010001111010101011011 0
b1111100100010001111010101011011 ;
b1111100100010001111010101011011 F
b1111100100010001111010101011011 _
b10000 )
b10000 7
b10000 D
b10000 -
b10000 :
b10000 E
b10000 ^
#59000
b1110111100001000000010011010100 1
b1110111100001000000010011010100 <
b1110111100001000000010011010100 O
b1110111100001000000010011010100 T
b1110111100001000000010011010100 \
b11100 N
b11100 [
b11100 Y
b11000 P
b10100 +
b10100 9
b10100 R
b10100 ]
b10100 Q
b10100 S
#60000
12
#65000
b1111010101011011 G
b11 K
b10 J
02
#67000
b1110111100001000000010011010100 *
b1110111100001000000010011010100 8
b1110111100001000000010011010100 C
b1110111100001000000010011010100 0
b1110111100001000000010011010100 ;
b1110111100001000000010011010100 F
b1110111100001000000010011010100 _
b10100 )
b10100 7
b10100 D
b10100 -
b10100 :
b10100 E
b10100 ^
#69000
b1110111110010001111010101011011 1
b1110111110010001111010101011011 <
b1110111110010001111010101011011 O
b1110111110010001111010101011011 T
b1110111110010001111010101011011 \
b100000 N
b100000 [
b100000 Y
b11100 P
b11000 +
b11000 9
b11000 R
b11000 ]
b11000 Q
b11000 S
#70000
12
#75000
b10011010100 G
b0 K
b1 J
b1110 I
02
#77000
b1110111110010001111010101011011 *
b1110111110010001111010101011011 8
b1110111110010001111010101011011 C
b1110111110010001111010101011011 0
b1110111110010001111010101011011 ;
b1110111110010001111010101011011 F
b1110111110010001111010101011011 _
b11000 )
b11000 7
b11000 D
b11000 -
b11000 :
b11000 E
b11000 ^
#79000
b1111100000001000000010011010100 1
b1111100000001000000010011010100 <
b1111100000001000000010011010100 O
b1111100000001000000010011010100 T
b1111100000001000000010011010100 \
b100100 N
b100100 [
b100100 Y
b100000 P
b11100 +
b11100 9
b11100 R
b11100 ]
b11100 Q
b11100 S
#80000
12
#85000
b1111010101011011 G
b11 K
b10 J
b1111 I
02
#87000
b1111100000001000000010011010100 *
b1111100000001000000010011010100 8
b1111100000001000000010011010100 C
b1111100000001000000010011010100 0
b1111100000001000000010011010100 ;
b1111100000001000000010011010100 F
b1111100000001000000010011010100 _
b11100 )
b11100 7
b11100 D
b11100 -
b11100 :
b11100 E
b11100 ^
#89000
b1001100100000000000110000110101 1
b1001100100000000000110000110101 <
b1001100100000000000110000110101 O
b1001100100000000000110000110101 T
b1001100100000000000110000110101 \
b101000 N
b101000 [
b101000 Y
b100100 P
b100000 +
b100000 9
b100000 R
b100000 ]
b100000 Q
b100000 S
#90000
12
#95000
b10011010100 G
b0 K
b1 J
b0 I
02
#97000
b1001100100000000000110000110101 *
b1001100100000000000110000110101 8
b1001100100000000000110000110101 C
b1001100100000000000110000110101 0
b1001100100000000000110000110101 ;
b1001100100000000000110000110101 F
b1001100100000000000110000110101 _
b100000 )
b100000 7
b100000 D
b100000 -
b100000 :
b100000 E
b100000 ^
#99000
b1111100100010001111010101011011 1
b1111100100010001111010101011011 <
b1111100100010001111010101011011 O
b1111100100010001111010101011011 T
b1111100100010001111010101011011 \
b101100 N
b101100 [
b101100 Y
b101000 P
b100100 +
b100100 9
b100100 R
b100100 ]
b100100 Q
b100100 S
#100000
12
