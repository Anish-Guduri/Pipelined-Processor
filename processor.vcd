$date
	Sat Nov 02 22:01:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! reset $end
$var wire 32 " output_register_file [31:0] $end
$var wire 32 # output_OF_PC [31:0] $end
$var wire 32 $ output_OF_IR [31:0] $end
$var wire 22 % output_MA_controlBus [21:0] $end
$var wire 32 & output_MA_PC [31:0] $end
$var wire 32 ' output_MA_IR [31:0] $end
$var wire 32 ( output_MA_ALU_Result [31:0] $end
$var wire 22 ) output_EX_controlBus [21:0] $end
$var wire 32 * output_EX_PC [31:0] $end
$var wire 32 + output_EX_IR [31:0] $end
$var wire 32 , outputPC [31:0] $end
$var wire 32 - op2 [31:0] $end
$var wire 32 . op1 [31:0] $end
$var wire 1 / is_Branch_Taken $end
$var wire 4 0 isStore_result [3:0] $end
$var wire 4 1 isReturn_result [3:0] $end
$var wire 1 2 isLastInstruction $end
$var wire 1 3 isDataInterLock $end
$var wire 22 4 input_RW_controlBus [21:0] $end
$var wire 32 5 input_RW_PC [31:0] $end
$var wire 32 6 input_RW_Ld_Result [31:0] $end
$var wire 32 7 input_RW_IR [31:0] $end
$var wire 32 8 input_RW_ALU_Result [31:0] $end
$var wire 32 9 input_OF_PC [31:0] $end
$var wire 32 : input_MA_op2 [31:0] $end
$var wire 22 ; input_MA_controlBus [21:0] $end
$var wire 32 < input_MA_PC [31:0] $end
$var wire 32 = input_MA_IR [31:0] $end
$var wire 32 > input_MA_ALU_Result [31:0] $end
$var wire 32 ? input_EX_PC [31:0] $end
$var wire 32 @ input_EX_IR [31:0] $end
$var wire 32 A branchTarget [31:0] $end
$var wire 32 B branchPC [31:0] $end
$var wire 4 C RW_rd [3:0] $end
$var wire 1 D RW_isWb $end
$var wire 32 E RW_Data_value [31:0] $end
$var wire 32 F PC [31:0] $end
$var wire 22 G Output_OF_controlBus [21:0] $end
$var wire 32 H Operand_EX_B [31:0] $end
$var wire 32 I Operand_EX_A [31:0] $end
$var wire 32 J Operand_EX_2 [31:0] $end
$var wire 32 K Operand_B [31:0] $end
$var wire 32 L Operand_A [31:0] $end
$var wire 32 M Operand_2 [31:0] $end
$var wire 32 N MDR [31:0] $end
$var wire 1 O MA_writeEnable $end
$var wire 32 P MA_Ld_Result [31:0] $end
$var wire 22 Q Input_OF_controlBus [21:0] $end
$var wire 32 R Input_OF_IR [31:0] $end
$var wire 22 S Input_EX_controlBus [21:0] $end
$var wire 32 T IR [31:0] $end
$var wire 32 U EX_op2 [31:0] $end
$var wire 32 V EX_branchTarget [31:0] $end
$var wire 32 W ALU_Result [31:0] $end
$var reg 1 X clk $end
$scope module processor $end
$var wire 32 Y EX_branchPC [31:0] $end
$var wire 1 Z EX_is_Branch_Taken $end
$var wire 32 [ address [31:0] $end
$var wire 1 X clk $end
$var wire 32 \ rdData1 [31:0] $end
$var wire 32 ] rdData2 [31:0] $end
$var wire 32 ^ writeData [31:0] $end
$var wire 1 _ writeEnable $end
$var wire 32 ` readData [31:0] $end
$var wire 32 a output_register_file [31:0] $end
$var wire 32 b output_OF_PC [31:0] $end
$var wire 32 c output_OF_IR [31:0] $end
$var wire 22 d output_MA_controlBus [21:0] $end
$var wire 32 e output_MA_PC [31:0] $end
$var wire 32 f output_MA_IR [31:0] $end
$var wire 32 g output_MA_ALU_Result [31:0] $end
$var wire 32 h output_IF_PC [31:0] $end
$var wire 22 i output_EX_controlBus [21:0] $end
$var wire 32 j output_EX_PC [31:0] $end
$var wire 32 k output_EX_IR [31:0] $end
$var wire 32 l op2 [31:0] $end
$var wire 32 m op1 [31:0] $end
$var wire 1 n is_RW_OF_conflict_src2 $end
$var wire 1 o is_RW_OF_conflict_src1 $end
$var wire 1 p is_RW_MA_conflict_src2 $end
$var wire 1 q is_RW_MA_conflict_src1 $end
$var wire 1 r is_RW_EX_conflict_src2 $end
$var wire 1 s is_RW_EX_conflict_src1 $end
$var wire 1 t is_MA_EX_conflict_src2 $end
$var wire 1 u is_MA_EX_conflict_src1 $end
$var wire 1 / is_Branch_Taken $end
$var wire 4 v isStore_result [3:0] $end
$var wire 4 w isReturn_result [3:0] $end
$var wire 1 2 isLastInstruction $end
$var wire 1 3 isDataInterLock $end
$var wire 22 x input_RW_controlBus [21:0] $end
$var wire 32 y input_RW_PC [31:0] $end
$var wire 32 z input_RW_Ld_Result [31:0] $end
$var wire 32 { input_RW_IR [31:0] $end
$var wire 32 | input_RW_ALU_Result [31:0] $end
$var wire 32 } input_OF_PC [31:0] $end
$var wire 32 ~ input_MA_op2 [31:0] $end
$var wire 22 !" input_MA_controlBus [21:0] $end
$var wire 32 "" input_MA_PC [31:0] $end
$var wire 32 #" input_MA_IR [31:0] $end
$var wire 32 $" input_MA_ALU_Result [31:0] $end
$var wire 32 %" input_EX_PC [31:0] $end
$var wire 32 &" input_EX_IR [31:0] $end
$var wire 32 '" branchTarget [31:0] $end
$var wire 32 (" branchPC [31:0] $end
$var wire 4 )" RW_rd [3:0] $end
$var wire 1 D RW_isWb $end
$var wire 32 *" RW_Data_value [31:0] $end
$var wire 22 +" Output_OF_controlBus [21:0] $end
$var wire 32 ," Operand_OF_B [31:0] $end
$var wire 32 -" Operand_OF_A [31:0] $end
$var wire 32 ." Operand_EX_B [31:0] $end
$var wire 32 /" Operand_EX_A [31:0] $end
$var wire 32 0" Operand_EX_2 [31:0] $end
$var wire 32 1" Operand_2 [31:0] $end
$var wire 32 2" MDR [31:0] $end
$var wire 1 O MA_writeEnable $end
$var wire 32 3" MA_Ld_Result [31:0] $end
$var wire 22 4" Input_OF_controlBus [21:0] $end
$var wire 32 5" Input_OF_IR [31:0] $end
$var wire 22 6" Input_EX_controlBus [21:0] $end
$var wire 32 7" IR [31:0] $end
$var wire 32 8" EX_op2 [31:0] $end
$var wire 32 9" EX_branchTarget [31:0] $end
$var wire 32 :" ALU_Result [31:0] $end
$var reg 32 ;" PC [31:0] $end
$var reg 1 ! reset $end
$scope module ALU_cycle $end
$var wire 1 r is_RW_EX_conflict_src2 $end
$var wire 1 s is_RW_EX_conflict_src1 $end
$var wire 1 t is_MA_EX_conflict_src2 $end
$var wire 1 u is_MA_EX_conflict_src1 $end
$var wire 32 <" input_MA_ALU_Result [31:0] $end
$var wire 32 =" input_EX_PC [31:0] $end
$var wire 32 >" input_EX_IR [31:0] $end
$var wire 2 ?" flags [1:0] $end
$var wire 4 @" RW_rd [3:0] $end
$var wire 32 A" RW_Data_value [31:0] $end
$var wire 32 B" Operand_EX_B [31:0] $end
$var wire 32 C" Operand_EX_A [31:0] $end
$var wire 32 D" Operand_EX_2 [31:0] $end
$var wire 22 E" Input_EX_controlBus [21:0] $end
$var wire 1 / EX_is_Branch_Taken $end
$var wire 32 F" EX_branchTarget [31:0] $end
$var wire 32 G" EX_branchPC [31:0] $end
$var wire 32 H" ALU_Result [31:0] $end
$var wire 32 I" ALU_Operand_B [31:0] $end
$var wire 32 J" ALU_Operand_A [31:0] $end
$var wire 32 K" ALU_Operand_2 [31:0] $end
$var reg 32 L" EX_op2 [31:0] $end
$var reg 32 M" output_EX_IR [31:0] $end
$var reg 32 N" output_EX_PC [31:0] $end
$var reg 22 O" output_EX_controlBus [21:0] $end
$scope module ALU_module $end
$var wire 13 P" ALU_Signals [21:9] $end
$var wire 32 Q" Operand_EX_B [31:0] $end
$var wire 32 R" Operand_EX_A [31:0] $end
$var reg 32 S" EX_ALU_Result [31:0] $end
$var reg 2 T" flags [1:0] $end
$var reg 1 U" isAdd $end
$var reg 1 V" isAnd $end
$var reg 1 W" isAsr $end
$var reg 1 X" isCmp $end
$var reg 1 Y" isDiv $end
$var reg 1 Z" isLsl $end
$var reg 1 [" isLsr $end
$var reg 1 \" isMod $end
$var reg 1 ]" isMov $end
$var reg 1 ^" isMul $end
$var reg 1 _" isNot $end
$var reg 1 `" isOr $end
$var reg 1 a" isSub $end
$upscope $end
$scope module branchUnit $end
$var wire 2 b" flags [1:0] $end
$var wire 32 c" Operand_EX_A [31:0] $end
$var wire 22 d" Input_EX_controlBus [21:0] $end
$var wire 32 e" EX_branchTarget [31:0] $end
$var wire 32 f" EX_branchPC [31:0] $end
$var reg 1 / EX_is_Branch_Taken $end
$var reg 1 g" isBeq $end
$var reg 1 h" isBgt $end
$var reg 1 i" isRet $end
$var reg 1 j" isUbranch $end
$scope module isReturn_mux $end
$var wire 1 i" selectLine $end
$var wire 32 k" input1 [31:0] $end
$var wire 32 l" input0 [31:0] $end
$var parameter 32 m" regSize $end
$var reg 32 n" output_y [31:0] $end
$upscope $end
$upscope $end
$scope module is_RW_EX_OP2_forwarding_src2 $end
$var wire 1 r selectLine $end
$var wire 32 o" input1 [31:0] $end
$var wire 32 p" input0 [31:0] $end
$var parameter 32 q" regSize $end
$var reg 32 r" output_y [31:0] $end
$upscope $end
$scope module is_RW_EX_forwarding_src1 $end
$var wire 2 s" selectLine [1:0] $end
$var wire 32 t" input2 [31:0] $end
$var wire 32 u" input1 [31:0] $end
$var wire 32 v" input0 [31:0] $end
$var parameter 32 w" regSize $end
$var reg 32 x" output_y [31:0] $end
$upscope $end
$scope module is_RW_EX_forwarding_src2 $end
$var wire 2 y" selectLine [1:0] $end
$var wire 32 z" input2 [31:0] $end
$var wire 32 {" input1 [31:0] $end
$var wire 32 |" input0 [31:0] $end
$var parameter 32 }" regSize $end
$var reg 32 ~" output_y [31:0] $end
$upscope $end
$upscope $end
$scope module MA_cycle $end
$var wire 32 !# readData [31:0] $end
$var wire 1 p is_RW_MA_conflict_src2 $end
$var wire 32 "# input_MA_op2 [31:0] $end
$var wire 22 ## input_MA_controlBus [21:0] $end
$var wire 32 $# input_MA_PC [31:0] $end
$var wire 32 %# input_MA_IR [31:0] $end
$var wire 32 &# input_MA_ALU_Result [31:0] $end
$var wire 4 '# RW_rd [3:0] $end
$var wire 32 (# RW_Data_value [31:0] $end
$var wire 32 )# MA_operand_2 [31:0] $end
$var reg 32 *# MAR [31:0] $end
$var reg 32 +# MA_Ld_Result [31:0] $end
$var reg 1 O MA_writeEnable $end
$var reg 32 ,# MDR [31:0] $end
$var reg 1 -# isLd $end
$var reg 1 .# isSt $end
$var reg 32 /# output_MA_ALU_Result [31:0] $end
$var reg 32 0# output_MA_IR [31:0] $end
$var reg 32 1# output_MA_PC [31:0] $end
$var reg 22 2# output_MA_controlBus [21:0] $end
$scope module is_RW_EX_OP2_forwarding_src2 $end
$var wire 1 p selectLine $end
$var wire 32 3# input1 [31:0] $end
$var wire 32 4# input0 [31:0] $end
$var parameter 32 5# regSize $end
$var reg 32 6# output_y [31:0] $end
$upscope $end
$upscope $end
$scope module OperandFetch $end
$var wire 32 7# op2 [31:0] $end
$var wire 32 8# op1 [31:0] $end
$var wire 1 n is_RW_OF_conflict_src2 $end
$var wire 1 o is_RW_OF_conflict_src1 $end
$var wire 4 9# isStore_result [3:0] $end
$var wire 4 :# isReturn_result [3:0] $end
$var wire 32 ;# immediateVlaue [31:0] $end
$var wire 32 <# branchTarget [31:0] $end
$var wire 4 =# RW_rd [3:0] $end
$var wire 32 ># RW_Data_value [31:0] $end
$var wire 32 ?# Operand_B [31:0] $end
$var wire 32 @# Operand_A [31:0] $end
$var wire 32 A# Operand_2 [31:0] $end
$var wire 22 B# Input_OF_controlBus [21:0] $end
$var wire 32 C# Input_OF_PC [31:0] $end
$var wire 32 D# Input_OF_IR [31:0] $end
$var reg 22 E# Output_OF_controlBus [21:0] $end
$var reg 1 F# isImmediate $end
$var reg 1 G# isReturn $end
$var reg 1 H# isStore $end
$var reg 32 I# output_OF_IR [31:0] $end
$var reg 32 J# output_OF_PC [31:0] $end
$var reg 4 K# ra [3:0] $end
$var reg 4 L# rd [3:0] $end
$var reg 4 M# rs1 [3:0] $end
$var reg 4 N# rs2 [3:0] $end
$scope module calc_Immx_branchTarget $end
$var wire 1 O# uModifier $end
$var wire 32 P# instruction [31:0] $end
$var wire 32 Q# input_OF_PC [31:0] $end
$var wire 1 R# hModifier $end
$var reg 32 S# Immx [31:0] $end
$var reg 32 T# branchTarget [31:0] $end
$var reg 32 U# tempBranchTarget [31:0] $end
$upscope $end
$scope module isImmediate_mux $end
$var wire 32 V# input1 [31:0] $end
$var wire 1 F# selectLine $end
$var wire 32 W# input0 [31:0] $end
$var parameter 32 X# regSize $end
$var reg 32 Y# output_y [31:0] $end
$upscope $end
$scope module isRet_Mux $end
$var wire 4 Z# input0 [3:0] $end
$var wire 4 [# input1 [3:0] $end
$var wire 1 G# selectLine $end
$var parameter 32 \# regSize $end
$var reg 4 ]# output_y [3:0] $end
$upscope $end
$scope module isStore_mux $end
$var wire 4 ^# input0 [3:0] $end
$var wire 4 _# input1 [3:0] $end
$var wire 1 H# selectLine $end
$var parameter 32 `# regSize $end
$var reg 4 a# output_y [3:0] $end
$upscope $end
$scope module is_RW_OF_forwarding_src1 $end
$var wire 1 o selectLine $end
$var wire 32 b# input1 [31:0] $end
$var wire 32 c# input0 [31:0] $end
$var parameter 32 d# regSize $end
$var reg 32 e# output_y [31:0] $end
$upscope $end
$scope module is_RW_OF_forwarding_src2 $end
$var wire 1 n selectLine $end
$var wire 32 f# input1 [31:0] $end
$var wire 32 g# input0 [31:0] $end
$var parameter 32 h# regSize $end
$var reg 32 i# output_y [31:0] $end
$upscope $end
$upscope $end
$scope module controlUnit $end
$var wire 1 ! reset $end
$var wire 32 j# Input_OF_IR [31:0] $end
$var reg 1 k# I $end
$var reg 22 l# controlBus [21:0] $end
$var reg 1 m# isAdd $end
$var reg 1 n# isAnd $end
$var reg 1 o# isAsr $end
$var reg 1 p# isBeq $end
$var reg 1 q# isBgt $end
$var reg 1 r# isCall $end
$var reg 1 s# isCmp $end
$var reg 1 t# isDiv $end
$var reg 1 u# isImmediate $end
$var reg 1 v# isLd $end
$var reg 1 w# isLsl $end
$var reg 1 x# isLsr $end
$var reg 1 y# isMod $end
$var reg 1 z# isMov $end
$var reg 1 {# isMul $end
$var reg 1 |# isNot $end
$var reg 1 }# isOr $end
$var reg 1 ~# isRet $end
$var reg 1 !$ isSt $end
$var reg 1 "$ isSub $end
$var reg 1 #$ isUbranch $end
$var reg 1 $$ isWb $end
$var reg 1 %$ op1 $end
$var reg 1 &$ op2 $end
$var reg 1 '$ op3 $end
$var reg 1 ($ op4 $end
$var reg 1 )$ op5 $end
$upscope $end
$scope module data_memory $end
$var wire 32 *$ address [31:0] $end
$var wire 1 X clk $end
$var wire 1 ! reset $end
$var wire 32 +$ writeData [31:0] $end
$var wire 1 O writeEnable $end
$var reg 33 ,$ k [32:0] $end
$var reg 32 -$ readData [31:0] $end
$var integer 32 .$ i [31:0] $end
$upscope $end
$scope module ex_ma_latch $end
$var wire 32 /$ ALU_Result [31:0] $end
$var wire 32 0$ EX_op2 [31:0] $end
$var wire 1 X clk $end
$var wire 32 1$ output_EX_IR [31:0] $end
$var wire 32 2$ output_EX_PC [31:0] $end
$var wire 22 3$ output_EX_controlBus [21:0] $end
$var reg 32 4$ input_MA_ALU_Result [31:0] $end
$var reg 32 5$ input_MA_IR [31:0] $end
$var reg 32 6$ input_MA_PC [31:0] $end
$var reg 22 7$ input_MA_controlBus [21:0] $end
$var reg 32 8$ input_MA_op2 [31:0] $end
$upscope $end
$scope module forwarding_src1 $end
$var wire 32 9$ input_MA_IR [31:0] $end
$var wire 32 :$ input_RW_IR [31:0] $end
$var wire 32 ;$ input_OF_IR [31:0] $end
$var wire 32 <$ input_EX_IR [31:0] $end
$var reg 5 =$ EX_opcode [4:0] $end
$var reg 4 >$ EX_src1 [3:0] $end
$var reg 4 ?$ MA_dest [3:0] $end
$var reg 5 @$ MA_opcode [4:0] $end
$var reg 4 A$ MA_src1 [3:0] $end
$var reg 5 B$ OF_opcode [4:0] $end
$var reg 4 C$ OF_src1 [3:0] $end
$var reg 4 D$ RW_dest [3:0] $end
$var reg 5 E$ RW_opcode [4:0] $end
$var reg 1 u is_MA_EX_conflict_src1 $end
$var reg 1 s is_RW_EX_conflict_src1 $end
$var reg 1 q is_RW_MA_conflict_src1 $end
$var reg 1 o is_RW_OF_conflict_src1 $end
$var reg 4 F$ ra [3:0] $end
$upscope $end
$scope module forwarding_src2 $end
$var wire 32 G$ input_MA_IR [31:0] $end
$var wire 32 H$ input_RW_IR [31:0] $end
$var wire 32 I$ input_OF_IR [31:0] $end
$var wire 32 J$ input_EX_IR [31:0] $end
$var reg 5 K$ EX_opcode [4:0] $end
$var reg 4 L$ EX_src2 [3:0] $end
$var reg 4 M$ MA_dest [3:0] $end
$var reg 5 N$ MA_opcode [4:0] $end
$var reg 4 O$ MA_src2 [3:0] $end
$var reg 5 P$ OF_opcode [4:0] $end
$var reg 4 Q$ OF_src2 [3:0] $end
$var reg 4 R$ RW_dest [3:0] $end
$var reg 5 S$ RW_opcode [4:0] $end
$var reg 1 T$ first_Done $end
$var reg 1 t is_MA_EX_conflict_src2 $end
$var reg 1 r is_RW_EX_conflict_src2 $end
$var reg 1 p is_RW_MA_conflict_src2 $end
$var reg 1 n is_RW_OF_conflict_src2 $end
$var reg 4 U$ ra [3:0] $end
$upscope $end
$scope module iFetch $end
$var wire 32 V$ branchPC [31:0] $end
$var wire 1 X clk $end
$var wire 32 W$ inputPC [31:0] $end
$var wire 1 / is_Branch_Taken $end
$var wire 1 ! reset $end
$var wire 32 X$ mux_nextPC [31:0] $end
$var wire 1 3 isDataInterLock $end
$var wire 32 Y$ IR [31:0] $end
$var reg 32 Z$ PC [31:0] $end
$var reg 32 [$ address [31:0] $end
$var reg 32 \$ outputPC [31:0] $end
$scope module iMemory $end
$var wire 32 ]$ address [31:0] $end
$var reg 32 ^$ instruction [31:0] $end
$var reg 32 _$ temp [31:0] $end
$var integer 32 `$ file [31:0] $end
$var integer 32 a$ i [31:0] $end
$var integer 32 b$ readResult [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 c$ input0 [31:0] $end
$var wire 32 d$ input1 [31:0] $end
$var wire 1 / selectLine $end
$var parameter 32 e$ regSize $end
$var reg 32 f$ output_y [31:0] $end
$upscope $end
$upscope $end
$scope module is_data_interlock $end
$var wire 32 g$ input_MA_IR [31:0] $end
$var wire 32 h$ input_RW_IR [31:0] $end
$var wire 32 i$ input_OF_IR [31:0] $end
$var wire 32 j$ input_EX_IR [31:0] $end
$var reg 4 k$ EX_dest [3:0] $end
$var reg 5 l$ EX_opcode [4:0] $end
$var reg 1 m$ OF_hasSrc1 $end
$var reg 1 n$ OF_hasSrc2 $end
$var reg 5 o$ OF_opcode [4:0] $end
$var reg 1 3 isDataInterLock $end
$var reg 4 p$ ra [3:0] $end
$var reg 4 q$ src1 [3:0] $end
$var reg 4 r$ src2 [3:0] $end
$upscope $end
$scope module latch_if_of $end
$var wire 32 s$ IF_instruction [31:0] $end
$var wire 1 X clk $end
$var wire 1 / isBranchInterLock $end
$var wire 1 3 isDataInterLock $end
$var wire 32 t$ output_IF_PC [31:0] $end
$var reg 32 u$ Input_OF_PC [31:0] $end
$var reg 32 v$ OF_instruction [31:0] $end
$upscope $end
$scope module ma_ra_latch $end
$var wire 32 w$ MA_Ld_Result [31:0] $end
$var wire 1 X clk $end
$var wire 32 x$ output_MA_ALU_Result [31:0] $end
$var wire 32 y$ output_MA_IR [31:0] $end
$var wire 32 z$ output_MA_PC [31:0] $end
$var wire 22 {$ output_MA_controlBus [21:0] $end
$var reg 32 |$ input_RW_ALU_Result [31:0] $end
$var reg 32 }$ input_RW_IR [31:0] $end
$var reg 32 ~$ input_RW_Ld_Result [31:0] $end
$var reg 32 !% input_RW_PC [31:0] $end
$var reg 22 "% input_RW_controlBus [21:0] $end
$upscope $end
$scope module of_ex_latch $end
$var wire 32 #% OF_branchTarget [31:0] $end
$var wire 32 $% Operand_OF_2 [31:0] $end
$var wire 32 %% Operand_OF_A [31:0] $end
$var wire 32 &% Operand_OF_B [31:0] $end
$var wire 22 '% Output_OF_controlBus [21:0] $end
$var wire 1 X clk $end
$var wire 1 / isBranchInterLock $end
$var wire 1 3 isDataInterLock $end
$var wire 32 (% output_OF_IR [31:0] $end
$var wire 32 )% output_OF_PC [31:0] $end
$var reg 32 *% EX_branchTarget [31:0] $end
$var reg 22 +% Input_EX_controlBus [21:0] $end
$var reg 32 ,% Operand_EX_2 [31:0] $end
$var reg 32 -% Operand_EX_A [31:0] $end
$var reg 32 .% Operand_EX_B [31:0] $end
$var reg 32 /% input_EX_IR [31:0] $end
$var reg 32 0% input_EX_PC [31:0] $end
$upscope $end
$scope module r_File_processor $end
$var wire 1 X clk $end
$var wire 4 1% operand1 [3:0] $end
$var wire 4 2% operand2 [3:0] $end
$var wire 1 ! reset $end
$var wire 1 D writeEnable $end
$var wire 32 3% wrData [31:0] $end
$var wire 4 4% dReg [3:0] $end
$var reg 32 5% output_register_file [31:0] $end
$var reg 32 6% rdData1 [31:0] $end
$var reg 32 7% rdData2 [31:0] $end
$var reg 1 8% temp $end
$var integer 32 9% k [31:0] $end
$upscope $end
$scope module rw_stage $end
$var wire 32 :% input_RW_ALU_Result [31:0] $end
$var wire 32 ;% input_RW_IR [31:0] $end
$var wire 32 <% input_RW_Ld_Result [31:0] $end
$var wire 32 =% input_RW_PC [31:0] $end
$var wire 22 >% input_RW_controlBus [21:0] $end
$var wire 4 ?% RW_rd [3:0] $end
$var wire 32 @% RW_Data_value [31:0] $end
$var reg 1 D RW_isWb $end
$var reg 1 A% isCall $end
$var reg 1 2 isLastInstruction $end
$var reg 1 B% isLd $end
$var reg 2 C% mux_selectLines [1:0] $end
$var reg 4 D% ra [3:0] $end
$var reg 4 E% rd [3:0] $end
$scope module isCall_mux $end
$var wire 4 F% input0 [3:0] $end
$var wire 4 G% input1 [3:0] $end
$var wire 1 A% selectLine $end
$var parameter 32 H% regSize $end
$var reg 4 I% output_y [3:0] $end
$upscope $end
$scope module isLD_or_isCall_MUX $end
$var wire 32 J% input0 [31:0] $end
$var wire 32 K% input1 [31:0] $end
$var wire 32 L% input2 [31:0] $end
$var wire 2 M% selectLine [1:0] $end
$var parameter 32 N% regSize $end
$var reg 32 O% output_y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 N%
b100 H%
b100000 e$
b100000 h#
b100000 d#
b100 `#
b100 \#
b100000 X#
b100000 5#
b100000 }"
b100000 w"
b100000 q"
b100000 m"
$end
#0
$dumpvars
bx O%
bx M%
bx L%
bx K%
bx J%
bx I%
b1111 G%
bx F%
bx E%
b1111 D%
bx C%
xB%
xA%
bx @%
bx ?%
bx >%
bx =%
bx <%
bx ;%
bx :%
b10000 9%
08%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
bx (%
b0 '%
bx &%
bx %%
bx $%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
bx w$
bx v$
bx u$
bx t$
bx s$
bx r$
bx q$
b1111 p$
bx o$
xn$
xm$
bx l$
bx k$
bx j$
bx i$
bx h$
bx g$
b100 f$
bx d$
b100 c$
b1 b$
b100 a$
b10000000000000000000000000000011 `$
b11111000000000000000000000000000 _$
bx ^$
bx ]$
bx \$
bx [$
b0 Z$
bx Y$
b100 X$
bx W$
bx V$
b1111 U$
0T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
b1111 F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
bx 0$
bx /$
b111110100000 .$
bx -$
b0 ,$
bx +$
bx *$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
b0 l#
xk#
bx j#
bx i#
bx g#
bx f#
bx e#
bx c#
bx b#
bx a#
bx _#
bx ^#
bx ]#
b1111 [#
bx Z#
bx Y#
bx W#
bx V#
bx U#
bx T#
bx S#
xR#
bx Q#
bx P#
xO#
bx N#
bx M#
bx L#
b1111 K#
bx J#
bx I#
0H#
0G#
0F#
b0 E#
bx D#
bx C#
b0 B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
x.#
x-#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx |"
bx {"
bx z"
bx y"
bx x"
bx v"
bx u"
bx t"
b0 s"
bx r"
bx p"
bx o"
bx n"
bx l"
bx k"
xj"
xi"
xh"
xg"
bx f"
bx e"
bx d"
bx c"
bx b"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
b0 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
b0 +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
0u
xt
0s
xr
0q
xp
0o
xn
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
z_
bz ^
bz ]
bz \
bz [
zZ
bz Y
1X
bx W
bx V
bx U
bx T
bx S
bx R
b0 Q
bx P
xO
bx N
bx M
bx L
bx K
bx J
bx I
bx H
b0 G
bx F
bx E
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
03
x2
bx 1
bx 0
x/
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
1!
$end
#4000
0!
#5000
0/
b0 )
b0 i
b0 O"
b0 3$
0h"
0g"
0i"
0j"
b1110100010010000000000000000100 T
b1110100010010000000000000000100 7"
b1110100010010000000000000000100 Y$
b1110100010010000000000000000100 ^$
b1110100010010000000000000000100 s$
0]"
0_"
0V"
0`"
0W"
0["
0Z"
0\"
0Y"
0^"
0X"
0a"
0U"
b0 P"
b1000 X$
b1000 f$
b0 S
b0 6"
b0 E"
b0 d"
b0 +%
b1000 c$
b100 Z$
b0 ,
b0 h
b0 \$
b0 t$
b0 [$
b0 ]$
0X
#10000
1X
#15000
b1001100010 G
b1001100010 +"
b1001100010 E#
b1001100010 '%
1F#
0G#
0H#
0z#
0|#
0n#
0}#
0o#
0x#
0w#
0y#
0t#
0{#
0s#
0"$
1m#
0r#
0#$
1$$
1u#
0~#
0q#
0p#
1v#
0!$
b100 K
b100 ,"
b100 ?#
b100 Y#
b100 &%
b0 M
b0 1"
b0 A#
b0 W#
b0 i#
b0 $%
b0 L
b0 -"
b0 @#
b0 e#
b0 %%
b0 -
b0 l
b0 7#
b0 g#
b0 7%
b0 .
b0 m
b0 8#
b0 c#
b0 6%
b10 1
b10 w
b10 :#
b10 ]#
b10 1%
b0 0
b0 v
b0 9#
b0 a#
b0 2%
b100 ;#
b100 S#
b100 V#
b0 %
b0 d
b0 2#
b0 {$
0-#
0.#
0O
b1001100010 Q
b1001100010 4"
b1001100010 B#
b1001100010 l#
0)$
1($
1'$
1&$
0%$
1k#
b1110100010010000000000000000100 $
b1110100010010000000000000000100 c
b1110100010010000000000000000100 I#
b1110100010010000000000000000100 (%
b0 #
b0 b
b0 J#
b0 )%
b0 N#
b0 ^#
b10 M#
b10 Z#
b1 L#
b1 _#
bx100010010000000000000000100xx U#
b1111100010011000000000000001000 T
b1111100010011000000000000001000 7"
b1111100010011000000000000001000 Y$
b1111100010011000000000000001000 ^$
b1111100010011000000000000001000 s$
0R#
0O#
b1110 B$
0t
0p
b0 y"
0r
0n
b1110 P$
b1110 o$
b1100 X$
b1100 f$
b0 ;
b0 !"
b0 ##
b0 7$
b1110100010010000000000000000100 R
b1110100010010000000000000000100 5"
b1110100010010000000000000000100 D#
b1110100010010000000000000000100 P#
b1110100010010000000000000000100 j#
b1110100010010000000000000000100 ;$
b1110100010010000000000000000100 I$
b1110100010010000000000000000100 i$
b1110100010010000000000000000100 v$
b0 9
b0 }
b0 C#
b0 Q#
b0 u$
b1100 c$
b1000 Z$
b100 ,
b100 h
b100 \$
b100 t$
b100 [$
b100 ]$
0X
#16000
b111100010010000000000000000100xx U#
#17000
b11110001001000000000000000010000 U#
#18000
b11110001001000000000000000010000 A
b11110001001000000000000000010000 '"
b11110001001000000000000000010000 <#
b11110001001000000000000000010000 T#
b11110001001000000000000000010000 #%
#20000
1X
#25000
b1 0
b1 v
b1 9#
b1 a#
b1 2%
b1000100001 G
b1000100001 +"
b1000100001 E#
b1000100001 '%
1H#
b1000100001 Q
b1000100001 4"
b1000100001 B#
b1000100001 l#
0$$
0v#
1!$
b0 C%
b0 M%
b1000 K
b1000 ,"
b1000 ?#
b1000 Y#
b1000 &%
b11 1
b11 w
b11 :#
b11 ]#
b11 1%
b0 U
b0 8"
b0 L"
b0 0$
b1000 ;#
b1000 S#
b1000 V#
1%$
b1111100010011000000000000001000 $
b1111100010011000000000000001000 c
b1111100010011000000000000001000 I#
b1111100010011000000000000001000 (%
b100 #
b100 b
b100 J#
b100 )%
b11 M#
b11 Z#
b11110001001100000000000000100000 U#
b1001100010 )
b1001100010 i
b1001100010 O"
b1001100010 3$
b1110100010010000000000000000100 +
b1110100010010000000000000000100 k
b1110100010010000000000000000100 M"
b1110100010010000000000000000100 1$
b0 *
b0 j
b0 N"
b0 2$
0D
0A%
0B%
b1110100010011000000000000001000 T
b1110100010011000000000000001000 7"
b1110100010011000000000000001000 Y$
b1110100010011000000000000001000 ^$
b1110100010011000000000000001000 s$
b100 W
b100 :"
b100 H"
b100 S"
b100 /$
1U"
b0 K"
b0 r"
b100 I"
b100 Q"
b100 ~"
b0 J"
b0 R"
b0 c"
b0 k"
b0 x"
b11110001001000000000000000010000 B
b11110001001000000000000000010000 ("
b11110001001000000000000000010000 G"
b11110001001000000000000000010000 f"
b11110001001000000000000000010000 n"
b11110001001000000000000000010000 V$
b11110001001000000000000000010000 d$
b1110 =$
b1111 B$
b1110 K$
b1111 P$
1n$
1m$
b1 k$
b0 r$
b11 q$
b1110 l$
b1111 o$
b1 P"
b10000 X$
b10000 f$
b1111100010011000000000000001000 R
b1111100010011000000000000001000 5"
b1111100010011000000000000001000 D#
b1111100010011000000000000001000 P#
b1111100010011000000000000001000 j#
b1111100010011000000000000001000 ;$
b1111100010011000000000000001000 I$
b1111100010011000000000000001000 i$
b1111100010011000000000000001000 v$
b100 9
b100 }
b100 C#
b100 Q#
b100 u$
b0 J
b0 0"
b0 D"
b0 p"
b0 ,%
b100 H
b100 ."
b100 B"
b100 |"
b100 .%
b0 I
b0 /"
b0 C"
b0 v"
b0 -%
b11110001001000000000000000010000 V
b11110001001000000000000000010000 9"
b11110001001000000000000000010000 F"
b11110001001000000000000000010000 e"
b11110001001000000000000000010000 l"
b11110001001000000000000000010000 *%
b0 ?
b0 %"
b0 ="
b0 0%
b1110100010010000000000000000100 @
b1110100010010000000000000000100 &"
b1110100010010000000000000000100 >"
b1110100010010000000000000000100 <$
b1110100010010000000000000000100 J$
b1110100010010000000000000000100 j$
b1110100010010000000000000000100 /%
b1001100010 S
b1001100010 6"
b1001100010 E"
b1001100010 d"
b1001100010 +%
b0 4
b0 x
b0 "%
b0 >%
b10000 c$
b1100 Z$
b1000 ,
b1000 h
b1000 \$
b1000 t$
b1000 [$
b1000 ]$
0X
#28000
b11110001001100000000000000100100 A
b11110001001100000000000000100100 '"
b11110001001100000000000000100100 <#
b11110001001100000000000000100100 T#
b11110001001100000000000000100100 #%
#30000
1X
#35000
b0 0
b0 v
b0 9#
b0 a#
b0 2%
b1001100010 G
b1001100010 +"
b1001100010 E#
b1001100010 '%
0H#
b1001100010 Q
b1001100010 4"
b1001100010 B#
b1001100010 l#
b0 P
b0 3"
b0 +#
b0 w$
1$$
1v#
0!$
b0 `
b0 !#
b0 -$
b0 N
b0 2"
b0 ,#
b0 +$
b1001100010 %
b1001100010 d
b1001100010 2#
b1001100010 {$
b1110100010010000000000000000100 '
b1110100010010000000000000000100 f
b1110100010010000000000000000100 0#
b1110100010010000000000000000100 y$
b100 (
b100 g
b100 /#
b100 *$
b100 x$
b0 &
b0 e
b0 1#
b0 z$
b100 *#
1-#
b1000100001 )
b1000100001 i
b1000100001 O"
b1000100001 3$
b1111100010011000000000000001000 +
b1111100010011000000000000001000 k
b1111100010011000000000000001000 M"
b1111100010011000000000000001000 1$
b100 *
b100 j
b100 N"
b100 2$
0%$
b1110100010011000000000000001000 $
b1110100010011000000000000001000 c
b1110100010011000000000000001000 I#
b1110100010011000000000000001000 (%
b1000 #
b1000 b
b1000 J#
b1000 )%
b11111000000000000000000000000000 T
b11111000000000000000000000000000 7"
b11111000000000000000000000000000 Y$
b11111000000000000000000000000000 ^$
b11111000000000000000000000000000 s$
b0 )#
b0 6#
b11110001001100000000000000100100 B
b11110001001100000000000000100100 ("
b11110001001100000000000000100100 G"
b11110001001100000000000000100100 f"
b11110001001100000000000000100100 n"
b11110001001100000000000000100100 V$
b11110001001100000000000000100100 d$
b11 >$
b1 ?$
b1110 @$
b1111 =$
b1110 B$
b10 y"
1t
b1 M$
b1 L$
b1110 N$
b1111 K$
b1110 P$
b1111 l$
b1110 o$
b10100 X$
b10100 f$
b0 :
b0 ~
b0 "#
b0 4#
b0 8$
b100 >
b100 $"
b100 <"
b100 t"
b100 z"
b100 &#
b100 4$
b0 <
b0 ""
b0 $#
b0 6$
b1110100010010000000000000000100 =
b1110100010010000000000000000100 #"
b1110100010010000000000000000100 %#
b1110100010010000000000000000100 5$
b1110100010010000000000000000100 9$
b1110100010010000000000000000100 G$
b1110100010010000000000000000100 g$
b1001100010 ;
b1001100010 !"
b1001100010 ##
b1001100010 7$
b1000 H
b1000 ."
b1000 B"
b1000 |"
b1000 .%
b11110001001100000000000000100100 V
b11110001001100000000000000100100 9"
b11110001001100000000000000100100 F"
b11110001001100000000000000100100 e"
b11110001001100000000000000100100 l"
b11110001001100000000000000100100 *%
b100 ?
b100 %"
b100 ="
b100 0%
b1111100010011000000000000001000 @
b1111100010011000000000000001000 &"
b1111100010011000000000000001000 >"
b1111100010011000000000000001000 <$
b1111100010011000000000000001000 J$
b1111100010011000000000000001000 j$
b1111100010011000000000000001000 /%
b1000100001 S
b1000100001 6"
b1000100001 E"
b1000100001 d"
b1000100001 +%
b1110100010011000000000000001000 R
b1110100010011000000000000001000 5"
b1110100010011000000000000001000 D#
b1110100010011000000000000001000 P#
b1110100010011000000000000001000 j#
b1110100010011000000000000001000 ;$
b1110100010011000000000000001000 I$
b1110100010011000000000000001000 i$
b1110100010011000000000000001000 v$
b1000 9
b1000 }
b1000 C#
b1000 Q#
b1000 u$
b10100 c$
b10000 Z$
b1100 ,
b1100 h
b1100 \$
b1100 t$
b1100 [$
b1100 ]$
0X
#38000
b11110001001100000000000000101000 A
b11110001001100000000000000101000 '"
b11110001001100000000000000101000 <#
b11110001001100000000000000101000 T#
b11110001001100000000000000101000 #%
#40000
1X
#45000
b0 G
b0 +"
b0 E#
b0 '%
0F#
b0 Q
b0 4"
b0 B#
b0 l#
0m#
0$$
0u#
0v#
1O
b1 C%
b1 M%
b0 K
b0 ,"
b0 ?#
b0 Y#
b0 &%
b0 1
b0 w
b0 :#
b0 ]#
b0 1%
b1 C
b1 )"
b1 @"
b1 '#
b1 =#
b1 4%
b1 ?%
b1 I%
b0 N
b0 2"
b0 ,#
b0 +$
b0 ;#
b0 S#
b0 V#
1)$
1%$
0k#
b11111000000000000000000000000000 $
b11111000000000000000000000000000 c
b11111000000000000000000000000000 I#
b11111000000000000000000000000000 (%
b1100 #
b1100 b
b1100 J#
b1100 )%
b0 M#
b0 Z#
b0 L#
b0 _#
b11100000000000000000000000000000 U#
b1001100010 )
b1001100010 i
b1001100010 O"
b1001100010 3$
b1110100010011000000000000001000 +
b1110100010011000000000000001000 k
b1110100010011000000000000001000 M"
b1110100010011000000000000001000 1$
b1000 *
b1000 j
b1000 N"
b1000 2$
b1000100001 %
b1000100001 d
b1000100001 2#
b1000100001 {$
b1111100010011000000000000001000 '
b1111100010011000000000000001000 f
b1111100010011000000000000001000 0#
b1111100010011000000000000001000 y$
b100 &
b100 e
b100 1#
b100 z$
0-#
1.#
b1 E%
b1 F%
1D
1B%
bx T
bx 7"
bx Y$
bx ^$
bx s$
b1000 W
b1000 :"
b1000 H"
b1000 S"
b1000 /$
b0 )#
b0 6#
b1000 I"
b1000 Q"
b1000 ~"
b11110001001100000000000000101000 B
b11110001001100000000000000101000 ("
b11110001001100000000000000101000 G"
b11110001001100000000000000101000 f"
b11110001001100000000000000101000 n"
b11110001001100000000000000101000 V$
b11110001001100000000000000101000 d$
b1110 l$
b11111 o$
b0 E
b0 *"
b0 A"
b0 o"
b0 u"
b0 {"
b0 (#
b0 3#
b0 >#
b0 b#
b0 f#
b0 3%
b0 @%
b0 O%
b11 A$
b0 C$
b1 D$
b1110 E$
b1111 @$
b1110 =$
b11111 B$
1p
b1 O$
b1 R$
b0 Q$
b0 y"
0t
b1110 S$
b1111 N$
b1110 K$
b11111 P$
b11000 X$
b11000 f$
b11111000000000000000000000000000 R
b11111000000000000000000000000000 5"
b11111000000000000000000000000000 D#
b11111000000000000000000000000000 P#
b11111000000000000000000000000000 j#
b11111000000000000000000000000000 ;$
b11111000000000000000000000000000 I$
b11111000000000000000000000000000 i$
b11111000000000000000000000000000 v$
b1100 9
b1100 }
b1100 C#
b1100 Q#
b1100 u$
b11110001001100000000000000101000 V
b11110001001100000000000000101000 9"
b11110001001100000000000000101000 F"
b11110001001100000000000000101000 e"
b11110001001100000000000000101000 l"
b11110001001100000000000000101000 *%
b1000 ?
b1000 %"
b1000 ="
b1000 0%
b1110100010011000000000000001000 @
b1110100010011000000000000001000 &"
b1110100010011000000000000001000 >"
b1110100010011000000000000001000 <$
b1110100010011000000000000001000 J$
b1110100010011000000000000001000 j$
b1110100010011000000000000001000 /%
b1001100010 S
b1001100010 6"
b1001100010 E"
b1001100010 d"
b1001100010 +%
b100 <
b100 ""
b100 $#
b100 6$
b1111100010011000000000000001000 =
b1111100010011000000000000001000 #"
b1111100010011000000000000001000 %#
b1111100010011000000000000001000 5$
b1111100010011000000000000001000 9$
b1111100010011000000000000001000 G$
b1111100010011000000000000001000 g$
b1000100001 ;
b1000100001 !"
b1000100001 ##
b1000100001 7$
b100 L%
b0 5
b0 y
b0 !%
b0 =%
b100 8
b100 |
b100 |$
b100 :%
b100 J%
b0 6
b0 z
b0 ~$
b0 <%
b0 K%
b1110100010010000000000000000100 7
b1110100010010000000000000000100 {
b1110100010010000000000000000100 :$
b1110100010010000000000000000100 H$
b1110100010010000000000000000100 h$
b1110100010010000000000000000100 }$
b1110100010010000000000000000100 ;%
b1001100010 4
b1001100010 x
b1001100010 "%
b1001100010 >%
b11000 c$
b10100 Z$
b10000 ,
b10000 h
b10000 \$
b10000 t$
b10000 [$
b10000 ]$
0X
#46000
b0 U#
#48000
b1100 A
b1100 '"
b1100 <#
b1100 T#
b1100 #%
#50000
1X
#55000
bx G
bx +"
bx E#
bx '%
xF#
xG#
xH#
bx Q
bx 4"
bx B#
bx l#
b100 E
b100 *"
b100 A"
b100 o"
b100 u"
b100 {"
b100 (#
b100 3#
b100 >#
b100 b#
b100 f#
b100 3%
b100 @%
b100 O%
b0 C%
b0 M%
xz#
x|#
xn#
x}#
xo#
xx#
xw#
xy#
xt#
x{#
xs#
x"$
xm#
xr#
x#$
x$$
xu#
x~#
xq#
xp#
xv#
x!$
bx K
bx ,"
bx ?#
bx Y#
bx &%
bx M
bx 1"
bx A#
bx W#
bx i#
bx $%
bx L
bx -"
bx @#
bx e#
bx %%
bx -
bx l
bx 7#
bx g#
bx 7%
bx .
bx m
bx 8#
bx c#
bx 6%
bx 1
bx w
bx :#
bx ]#
bx 1%
bx 0
bx v
bx 9#
bx a#
bx 2%
0D
0B%
b1001100010 %
b1001100010 d
b1001100010 2#
b1001100010 {$
b1110100010011000000000000001000 '
b1110100010011000000000000001000 f
b1110100010011000000000000001000 0#
b1110100010011000000000000001000 y$
b1000 (
b1000 g
b1000 /#
b1000 *$
b1000 x$
b1000 &
b1000 e
b1000 1#
b1000 z$
b1000 *#
1-#
0.#
0O
b0 )
b0 i
b0 O"
b0 3$
b11111000000000000000000000000000 +
b11111000000000000000000000000000 k
b11111000000000000000000000000000 M"
b11111000000000000000000000000000 1$
b1100 *
b1100 j
b1100 N"
b1100 2$
bx ;#
bx S#
bx V#
x)$
x($
x'$
x&$
x%$
xk#
bx $
bx c
bx I#
bx (%
b10000 #
b10000 b
b10000 J#
b10000 )%
bx N#
bx ^#
bx M#
bx Z#
bx L#
bx _#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxx00 U#
0U"
b0 I"
b0 Q"
b0 ~"
b1100 B
b1100 ("
b1100 G"
b1100 f"
b1100 n"
b1100 V$
b1100 d$
b0 P"
xR#
xO#
b0 >$
b1111 E$
b1110 @$
b11111 =$
bx B$
b0 L$
0p
b1111 S$
b1110 N$
b11111 K$
bx P$
b11111 l$
bx o$
b11100 X$
b11100 f$
b1000 L%
b100 5
b100 y
b100 !%
b100 =%
b1111100010011000000000000001000 7
b1111100010011000000000000001000 {
b1111100010011000000000000001000 :$
b1111100010011000000000000001000 H$
b1111100010011000000000000001000 h$
b1111100010011000000000000001000 }$
b1111100010011000000000000001000 ;%
b1000100001 4
b1000100001 x
b1000100001 "%
b1000100001 >%
b1000 >
b1000 $"
b1000 <"
b1000 t"
b1000 z"
b1000 &#
b1000 4$
b1000 <
b1000 ""
b1000 $#
b1000 6$
b1110100010011000000000000001000 =
b1110100010011000000000000001000 #"
b1110100010011000000000000001000 %#
b1110100010011000000000000001000 5$
b1110100010011000000000000001000 9$
b1110100010011000000000000001000 G$
b1110100010011000000000000001000 g$
b1001100010 ;
b1001100010 !"
b1001100010 ##
b1001100010 7$
b0 H
b0 ."
b0 B"
b0 |"
b0 .%
b1100 V
b1100 9"
b1100 F"
b1100 e"
b1100 l"
b1100 *%
b1100 ?
b1100 %"
b1100 ="
b1100 0%
b11111000000000000000000000000000 @
b11111000000000000000000000000000 &"
b11111000000000000000000000000000 >"
b11111000000000000000000000000000 <$
b11111000000000000000000000000000 J$
b11111000000000000000000000000000 j$
b11111000000000000000000000000000 /%
b0 S
b0 6"
b0 E"
b0 d"
b0 +%
bx R
bx 5"
bx D#
bx P#
bx j#
bx ;$
bx I$
bx i$
bx v$
b10000 9
b10000 }
b10000 C#
b10000 Q#
b10000 u$
b0 "
b0 a
b0 5%
b11100 c$
b11000 Z$
b10100 ,
b10100 h
b10100 \$
b10100 t$
b10100 [$
b10100 ]$
0X
#56000
bx00 U#
#58000
bx A
bx '"
bx <#
bx T#
bx #%
#60000
1X
#65000
x/
b1 C%
b1 M%
bx U
bx 8"
bx L"
bx 0$
b10100 #
b10100 b
b10100 J#
b10100 )%
bx )
bx i
bx O"
bx 3$
bx +
bx k
bx M"
bx 1$
b10000 *
b10000 j
b10000 N"
b10000 2$
xh"
xg"
xi"
xj"
b0 %
b0 d
b0 2#
b0 {$
b11111000000000000000000000000000 '
b11111000000000000000000000000000 f
b11111000000000000000000000000000 0#
b11111000000000000000000000000000 y$
b1100 &
b1100 e
b1100 1#
b1100 z$
0-#
1D
1B%
x]"
x_"
xV"
x`"
xW"
x["
xZ"
x\"
xY"
x^"
xX"
xa"
xU"
bx K"
bx r"
bx I"
bx Q"
bx ~"
bx J"
bx R"
bx c"
bx k"
bx x"
bx B
bx ("
bx G"
bx f"
bx n"
bx V$
bx d$
bx l$
bx P"
b0 E
b0 *"
b0 A"
b0 o"
b0 u"
b0 {"
b0 (#
b0 3#
b0 >#
b0 b#
b0 f#
b0 3%
b0 @%
b0 O%
b0 A$
b1110 E$
b11111 @$
bx =$
b0 O$
b1110 S$
b11111 N$
bx K$
b100000 X$
b100000 f$
b10100 9
b10100 }
b10100 C#
b10100 Q#
b10100 u$
bx J
bx 0"
bx D"
bx p"
bx ,%
bx H
bx ."
bx B"
bx |"
bx .%
bx I
bx /"
bx C"
bx v"
bx -%
bx V
bx 9"
bx F"
bx e"
bx l"
bx *%
b10000 ?
b10000 %"
b10000 ="
b10000 0%
bx @
bx &"
bx >"
bx <$
bx J$
bx j$
bx /%
bx S
bx 6"
bx E"
bx d"
bx +%
b1100 <
b1100 ""
b1100 $#
b1100 6$
b11111000000000000000000000000000 =
b11111000000000000000000000000000 #"
b11111000000000000000000000000000 %#
b11111000000000000000000000000000 5$
b11111000000000000000000000000000 9$
b11111000000000000000000000000000 G$
b11111000000000000000000000000000 g$
b0 ;
b0 !"
b0 ##
b0 7$
b1100 L%
b1000 5
b1000 y
b1000 !%
b1000 =%
b1000 8
b1000 |
b1000 |$
b1000 :%
b1000 J%
b1110100010011000000000000001000 7
b1110100010011000000000000001000 {
b1110100010011000000000000001000 :$
b1110100010011000000000000001000 H$
b1110100010011000000000000001000 h$
b1110100010011000000000000001000 }$
b1110100010011000000000000001000 ;%
b1001100010 4
b1001100010 x
b1001100010 "%
b1001100010 >%
b100000 c$
b11100 Z$
b11000 ,
b11000 h
b11000 \$
b11000 t$
b11000 [$
b11000 ]$
0X
#70000
1X
#75000
b1000 E
b1000 *"
b1000 A"
b1000 o"
b1000 u"
b1000 {"
b1000 (#
b1000 3#
b1000 >#
b1000 b#
b1000 f#
b1000 3%
b1000 @%
b1000 O%
b0 C%
b0 M%
b0 C
b0 )"
b0 @"
b0 '#
b0 =#
b0 4%
b0 ?%
b0 I%
bx N
bx 2"
bx ,#
bx +$
b0 E%
b0 F%
0D
0B%
bx %
bx d
bx 2#
bx {$
bx '
bx f
bx 0#
bx y$
b10000 &
b10000 e
b10000 1#
b10000 z$
x-#
x.#
b10100 *
b10100 j
b10100 N"
b10100 2$
b11000 #
b11000 b
b11000 J#
b11000 )%
12
bx )#
bx 6#
b11111 E$
bx @$
b11111 S$
bx N$
b100100 X$
b100100 f$
b10000 L%
b1100 5
b1100 y
b1100 !%
b1100 =%
b11111000000000000000000000000000 7
b11111000000000000000000000000000 {
b11111000000000000000000000000000 :$
b11111000000000000000000000000000 H$
b11111000000000000000000000000000 h$
b11111000000000000000000000000000 }$
b11111000000000000000000000000000 ;%
b0 4
b0 x
b0 "%
b0 >%
bx :
bx ~
bx "#
bx 4#
bx 8$
b10000 <
b10000 ""
b10000 $#
b10000 6$
bx =
bx #"
bx %#
bx 5$
bx 9$
bx G$
bx g$
bx ;
bx !"
bx ##
bx 7$
b10100 ?
b10100 %"
b10100 ="
b10100 0%
b11000 9
b11000 }
b11000 C#
b11000 Q#
b11000 u$
b100100 c$
b100000 Z$
b11100 ,
b11100 h
b11100 \$
b11100 t$
b11100 [$
b11100 ]$
0X
#80000
1X
#83000
